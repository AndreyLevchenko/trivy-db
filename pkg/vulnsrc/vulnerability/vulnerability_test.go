package vulnerability

import (
	"fmt"
	"testing"

	"github.com/aquasecurity/trivy-db/pkg/types"

	"github.com/stretchr/testify/assert"
)

func TestFillAndFilter(t *testing.T) {
	detectedVulns := []types.DetectedVulnerability{
		{
			VulnerabilityID: "foo",
			Severity:        types.SeverityNames[types.SeverityHigh],
		},
		{
			VulnerabilityID: "piyo",
			Severity:        types.SeverityNames[types.SeverityCritical],
		},
		{
			VulnerabilityID: "bar",
			PkgName:         "barpkg",
			Severity:        types.SeverityNames[types.SeverityLow],
		},
		{
			VulnerabilityID: "hoge",
		},
		{
			VulnerabilityID: "baz",
			Severity:        types.SeverityNames[types.SeverityMedium],
		},
	}

	severities := []types.Severity{types.SeverityLow, types.SeverityCritical, types.SeverityMedium, types.SeverityHigh, types.SeverityUnknown}

	oldgetDetailFunc := getDetailFunc
	getDetailFunc = func(vulnID string) (severity types.Severity, s string, s2 string, strings []string) {
		switch vulnID {
		case "foo":
			return types.SeverityHigh, "footitle", "foodesc", []string{"fooref"}
		case "bar":
			return types.SeverityLow, "bartitle", "bardesc", []string{"barref"}
		case "baz":
			return types.SeverityMedium, "baztitle", "bazdesc", []string{"bazref"}
		case "piyo":
			return types.SeverityCritical, "piyotitle", "piyodesc", []string{"piyoref"}
		case "hoge":
			return types.SeverityUnknown, "hogetitle", "hogedesc", []string{"hogeref"}
		default:
			assert.Fail(t, fmt.Sprintf("unexpected vulnID: %s", vulnID))
			return types.SeverityUnknown, "", "", nil
		}
	}
	defer func() {
		getDetailFunc = oldgetDetailFunc
	}()

	assert.Equal(t, []types.DetectedVulnerability{
		{
			VulnerabilityID: "piyo",
			Title:           "piyotitle",
			Description:     "piyodesc",
			Severity:        types.SeverityNames[types.SeverityCritical],
			References:      []string{"piyoref"},
		},
		{
			VulnerabilityID: "foo",
			Title:           "footitle",
			Description:     "foodesc",
			Severity:        types.SeverityNames[types.SeverityHigh],
			References:      []string{"fooref"},
		},
		{
			VulnerabilityID: "baz",
			Title:           "baztitle",
			Description:     "bazdesc",
			Severity:        types.SeverityNames[types.SeverityMedium],
			References:      []string{"bazref"},
		},
		{
			VulnerabilityID: "hoge",
			Title:           "hogetitle",
			Description:     "hogedesc",
			Severity:        types.SeverityNames[types.SeverityUnknown],
			References:      []string{"hogeref"},
		},
		{
			VulnerabilityID: "bar",
			PkgName:         "barpkg",
			Title:           "bartitle",
			Description:     "bardesc",
			Severity:        types.SeverityNames[types.SeverityLow],
			References:      []string{"barref"},
		},
	}, FillAndFilter(detectedVulns, severities, false, ".trivyignore"))
}
