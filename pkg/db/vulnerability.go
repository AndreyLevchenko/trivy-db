package db

import (
	"encoding/json"

	"github.com/aquasecurity/trivy-db/pkg/types"

	bolt "github.com/etcd-io/bbolt"
	"golang.org/x/xerrors"
)

const (
	vulnerabilityBucket = "vulnerability"
)

func (dbc Config) PutVulnerability(tx *bolt.Tx, cveID string, vuln types.Vulnerability) error {
	bucket, err := tx.CreateBucketIfNotExists([]byte(vulnerabilityBucket))
	if err != nil {
		return xerrors.Errorf("failed to create a bucket: %w", err)
	}
	v, err := json.Marshal(vuln)
	if err != nil {
		return xerrors.Errorf("failed to marshal JSON: %w", err)
	}
	return bucket.Put([]byte(cveID), v)
}

func (dbc Config) GetVulnerability(tx *bolt.Tx, cveID string) (vuln types.Vulnerability, err error) {
	bucket, err := tx.CreateBucketIfNotExists([]byte(vulnerabilityBucket))
	if err != nil {
		return types.Vulnerability{}, xerrors.Errorf("failed to create a bucket: %w", err)
	}
	value := bucket.Get([]byte(cveID))
	if err = json.Unmarshal(value, &vuln); err != nil {
		return types.Vulnerability{}, xerrors.Errorf("failed to marshal JSON: %w", err)
	}
	return vuln, nil
}
